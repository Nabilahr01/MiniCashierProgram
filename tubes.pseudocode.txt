type Produk <
    ID: integer
    Nama: string
    Harga: real
>

type Pelanggan <
    ID: integer
    Nama: string
>

type Transaksi <
    ID: integer
    PelangganID: integer
    ProdukIDs: array of integer 
    Total: real
>

procedure urutkanProduk(in/out produkList: Produk)
kamus
    i, j, minIndex: integer
    temp: Produk
algoritma
    for i <- 0 to length(produkList) - 2 do
        minIndex <- i
        for j <- i + 1 to length(produkList) - 1 do
            if produkList[j].Harga < produkList[minIndex].Harga then
                minIndex <- j
            endif
        endfor
        temp <- produkList[i]
        produkList[i] <- produkList[minIndex]
        produkList[minIndex] <- temp
    endfor
endprocedure

procedure urutkanTransaksi(in/out transaksiList: Transaksi)
kamus
    i, j: integer
    temp: Transaksi
algoritma
    for i <- 1 to length(transaksiList) - 1 do
        temp <- transaksiList[i]
        j <- i - 1
        while j >= 0 and transaksiList[j].Total < temp.Total do
            transaksiList[j + 1] <- transaksiList[j]
            j <- j - 1
        endwhile
        transaksiList[j + 1] <- temp
    endfor
endprocedure

function cariProduk(in produkList: Produk, in keyword: string) -> Produk
kamus
    i: integer
    hasil: Produk
algoritma
    hasil <- array [] of Produk
    for i <- 0 to length(produkList) - 1 do
        if toLower(keyword) in toLower(produkList[i].Nama) then
            append hasil with produkList[i]
        endif
    endfor
    return hasil
endfunction

function cariTransaksi(in transaksiList: Transaksi, in id: integer) -> Transaksi or null
kamus
    i: integer
algoritma
    for i <- 0 to length(transaksiList) - 1 do
        if transaksiList[i].ID = id then
            return transaksiList[i]
        endif
    endfor
    return null
endfunction

function getNamaProduk(in produkList: Produk, in id: integer) -> string
kamus
    i: integer
algoritma
    for i <- 0 to length(produkList) - 1 do
        if produkList[i].ID = id then
            return produkList[i].Nama
        endif
    endfor
    return "Produk tidak ditemukan"
endfunction

function getNamaPelanggan(in pelangganList: Pelanggan, in id: integer) -> string
kamus
    i: integer
algoritma
    for i <- 0 to length(pelangganList) - 1 do
        if pelangganList[i].ID = id then
            return pelangganList[i].Nama
        endif
    endfor
    return "Pelanggan tidak ditemukan"
endfunction

procedure hitungTotal(in produkList: Produk, in produkIDs: array of integer, out total: real)
kamus
    i, j: integer
    total: real
algoritma
    total <- 0.0
    for i <- 0 to length(produkIDs) - 1 do
        id <- produkIDs[i]
        for j <- 0 to length(produkList) - 1 do
            if produkList[j].ID = id then
                total <- total + produkList[j].Harga
            endif
        endfor
    endfor
endprocedure

program kitamart
kamus
    jumlahProduk, jumlahPelanggan, jumlahTransaksi: integer
    daftarProduk: Produk
    daftarPelanggan: Pelanggan
    daftarTransaksi: Transaksi
algoritma
    output("Masukkan jumlah produk: ")
    input(jumlahProduk)
    buat array daftarProduk sebanyak jumlahProduk
    for i from 0 to jumlahProduk - 1 do
        daftarProduk[i].ID ← i + 1
        output("Nama produk ke-", i+1, ": ")
        input(daftarProduk[i].Nama)
        output("Harga produk: ")
        input(daftarProduk[i].Harga)
    endfor

    output("Masukkan jumlah pelanggan: ")
    input(jumlahPelanggan)
    buat array daftarPelanggan sebanyak jumlahPelanggan
    for i from 0 to jumlahPelanggan - 1 do
        daftarPelanggan[i].ID ← i + 1
        output("Nama pelanggan ke-", i+1, ": ")
        input(daftarPelanggan[i].Nama)
    endfor

    output("Masukkan jumlah transaksi: ")
    input(jumlahTransaksi)
    buat array daftarTransaksi sebanyak jumlahTransaksi
    for i from 0 to jumlahTransaksi - 1 do
        daftarTransaksi[i].ID ← i + 1
        output("ID Pelanggan: ")
        input(daftarTransaksi[i].IDPelanggan)
        output("Jumlah produk yang dibeli: ")
        input(jumlahBeli)
        buat array IDProduks sebanyak jumlahBeli
        for j from 0 to jumlahBeli - 1 do
            output("ID produk ke-", j+1, ": ")
            input(IDProduks[j])
        endfor

        daftarTransaksi[i].IDProduks ← IDProduks
        daftarTransaksi[i].Total ← hitungTotal(daftarProduk, IDProduks)
    endfor

    panggil sortProduk(daftarProduk)
    panggil sortTransaksi(daftarTransaksi)

    pilihan: integer
    ulangi
        output("===<< MENU >>===")
        output("1. Tampilkan daftar produk (terurut harga)")
        output("2. Tampilkan daftar transaksi (terurut total)")
        output("3. Cari produk berdasarkan nama")
        output("4. Cari transaksi berdasarkan ID")
        output("5. Keluar")
        output("Pilih menu: ")
        input(pilihan)

        switch pilihan
            case 1:
                output("Daftar Produk:")
                for i from 0 to length(daftarProduk) - 1 do
                    output(daftarProduk[i].ID, daftarProduk[i].Nama, daftarProduk[i].Harga)
                endfor

            case 2:
                output("Daftar Transaksi:")
                for i from 0 to length(daftarTransaksi) - 1 do
                    t ← daftarTransaksi[i]
                    namaPelanggan ← dataPelangganByID(daftarPelanggan, t.IDPelanggan)
                    daftarNamaProduk ← array [] of string

                    for j from 0 to length(t.IDProduks) - 1 do
                        namaProduk ← dataProdukByID(daftarProduk, t.IDProduks[j])
                        tambah namaProduk ke daftarNamaProduk 
                    endfor

                    gabungan ← gabungkan daftarNamaProduk dengan ", "
                    output("Transaksi", t.ID, "oleh", namaPelanggan)
                    output("Produk:", gabungan)
                    output("Total:", t.Total)
                endfor

            case 3:
                keyword : string
                output("Masukkan kata kunci nama produk: ")
                input(keyword)
                hasil ← cariProdukNama(daftarProduk, keyword)
                if panjang(hasil) = 0 then
                    output("Produk tidak ditemukan")
                else
                    output("Hasil pencarian:")
                    for i from 0 to panjang(hasil) - 1 do
                        output(hasil[i].ID, hasil[i].Nama, hasil[i].Harga)
                    endfor
                endif

            case 4:
                output("Masukkan ID transaksi: ")
                input(cariID)
                trans ← cariTransaksiID(daftarTransaksi, cariID)
                if trans ≠ null then
                    namaPelanggan ← dataPelangganByID(daftarPelanggan, trans.IDPelanggan)
                    daftarNamaProduk ← array [] of string

                    for i from 0 to length(trans.IDProduks) - 1 do
                        namaProduk ← dataProdukByID(daftarProduk, trans.IDProduks[i])
                        tambah namaProduk ke daftarNamaProduk
                    endfor

                    gabungan ← gabungkan daftarNamaProduk dengan ", "
                    output("Transaksi:", trans.ID)
                    output("Pelanggan:", namaPelanggan)
                    output("Produk:", gabungan)
                    output("Total:", trans.Total)
                else
                    output("Transaksi tidak ditemukan")
                endif

            case 5:
                output("Terima kasih telah belanja di Kitamart")
                keluar dari program

            default:
                output("Pilihan tidak valid")
        endswitch

    sampai pilihan = 5

endprogram


